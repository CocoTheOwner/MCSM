name: Release on tag

env:
  # Name of the rust project, which is used to find the executable
  # This is the name of the project in Cargo.toml
  # Must be consistent with the name of the project in Cargo.toml, otherwise the executable will not be found
  OUTPUT_NAME: mcsm
  CARGO_TERM_COLOR: always

on:
  push:
    tags:
      - 'v*'

jobs:

  build_and_release_windows:
    name: Build and Release Windows

    runs-on: windows-latest

    # Set environment variables, which are used in the job
    env:
      RELEASE_NAME_WIN: "${{ github.event.repository.name }}-${{ github.ref_name }}-Windows"
      OUTPUT_DIR: "./target/release"
    
    steps:
    # Make available the code in the repository to the job
    - uses: actions/checkout@v3

    # Replace version in cargo.toml
    - name: Set Cargo Version
      run: |
        $version = $env:GITHUB_REF -replace '^refs/tags/v', ''
        $content = Get-Content -Path Cargo.toml
        $content = $content -replace 'version = "0.0.0"', "version = ""$version"""
        $content | Set-Content -Path Cargo.toml

    # Build the release
    - name: Build Release
      run: cargo build --release 

    # Rename the artifact, so it has the correct name
    - name: Rename Artifact
      run: mv ${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_NAME }}.exe ${{ env.OUTPUT_DIR }}/${{ env.RELEASE_NAME_WIN }}.exe

    # Create a release on Github, with the artifacts, which can be updated from other jobs
    - name: Add Artifact To Github Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ env.OUTPUT_DIR }}/${{ env.RELEASE_NAME_WIN }}.exe" # The artifact to add to the release
        replacesArtifacts: false # If the artifact already exists, replace it
        token: ${{ secrets.GITHUB_TOKEN }} # The token to use to authenticate with Github
        allowUpdates: true # Allow the release to be updated
        generateReleaseNotes: true # Generate release notes from the commits
        draft: false # If the release should be a draft
        makeLatest: true # If the release should be marked as the latest release
        artifactErrorsFailBuild: true # If the build should fail if the artifact cannot be added to the release
        updateOnlyUnreleased: true # If the build should fail if the release is not a draft or pre-release
      
    # Upload the artifact to the job, so it can be downloaded from the job
    - name: Add Artifact To Action Job
      uses: actions/upload-artifact@v3
      with:
        name: "${{ env.RELEASE_NAME_WIN }}.exe"
        path: "${{ env.OUTPUT_DIR }}/${{ env.RELEASE_NAME_WIN }}.exe"
        retention-days: 5
